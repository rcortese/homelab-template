name: Template Quality Checks

# -----------------------------------------------------------------------------
# Este workflow concentra as validações compartilhadas pelo template (lint de
# shell, verificação dos manifests do Docker Compose e suíte de testes
# automatizados). Para adicionar verificações específicas em projetos
# derivados, utilize o workflow reutilizável `project-tests.yml`. Evite
# modificar este arquivo no fork para reduzir conflitos ao sincronizar com o
# template principal.
# -----------------------------------------------------------------------------

on:
  push:
    branches: [ main ]
    paths:
      - '.github/**'
      - 'compose/**'
      - 'env/**'
      - 'scripts/**'
      - 'tests/**'
      - 'requirements-dev.txt'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/**'
      - 'compose/**'
      - 'env/**'
      - 'scripts/**'
      - 'tests/**'
      - 'requirements-dev.txt'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install shell tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt devscripts

      - name: Check shell formatting with shfmt
        run: |
          set -euo pipefail
          mapfile -d '' sh_files < <(find scripts -type f -name '*.sh' -print0)
          if [ "${#sh_files[@]}" -eq 0 ]; then
            echo "No shell scripts found for shfmt."
            exit 0
          fi
          shfmt -d "${sh_files[@]}"

      - name: Run checkbashisms on POSIX shell scripts
        run: |
          set -euo pipefail
          mapfile -d '' posix_scripts < <(grep -rlZ --binary-files=without-match '^#!/bin/sh' scripts || true)
          if [ "${#posix_scripts[@]}" -eq 0 ]; then
            echo "No /bin/sh scripts found for checkbashisms."
            exit 0
          fi
          checkbashisms "${posix_scripts[@]}"

      - name: Run ShellCheck
        run: find scripts -type f -name '*.sh' -print0 | xargs -0 -r shellcheck

  tests:
    runs-on: ubuntu-latest
    needs: lint
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify repository structure
        run: scripts/check_structure.sh

      - name: Validate compose configurations
        run: scripts/validate_compose.sh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run test suite
        run: python -m pytest

  project-tests:
    name: Project specific tests
    needs: tests
    if: always()
    uses: ./.github/workflows/project-tests.yml
    secrets: inherit
